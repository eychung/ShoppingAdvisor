# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ranktree', [dirname(__file__)])
        except ImportError:
            import _ranktree
            return _ranktree
        if fp is not None:
            try:
                _mod = imp.load_module('_ranktree', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ranktree = swig_import_helper()
    del swig_import_helper
else:
    import _ranktree
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


RED = _ranktree.RED
BLACK = _ranktree.BLACK
class rbtree_node_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rbtree_node_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rbtree_node_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _ranktree.rbtree_node_t_key_set
    __swig_getmethods__["key"] = _ranktree.rbtree_node_t_key_get
    if _newclass:key = _swig_property(_ranktree.rbtree_node_t_key_get, _ranktree.rbtree_node_t_key_set)
    __swig_setmethods__["size"] = _ranktree.rbtree_node_t_size_set
    __swig_getmethods__["size"] = _ranktree.rbtree_node_t_size_get
    if _newclass:size = _swig_property(_ranktree.rbtree_node_t_size_get, _ranktree.rbtree_node_t_size_set)
    __swig_setmethods__["duplicates"] = _ranktree.rbtree_node_t_duplicates_set
    __swig_getmethods__["duplicates"] = _ranktree.rbtree_node_t_duplicates_get
    if _newclass:duplicates = _swig_property(_ranktree.rbtree_node_t_duplicates_get, _ranktree.rbtree_node_t_duplicates_set)
    __swig_setmethods__["left"] = _ranktree.rbtree_node_t_left_set
    __swig_getmethods__["left"] = _ranktree.rbtree_node_t_left_get
    if _newclass:left = _swig_property(_ranktree.rbtree_node_t_left_get, _ranktree.rbtree_node_t_left_set)
    __swig_setmethods__["right"] = _ranktree.rbtree_node_t_right_set
    __swig_getmethods__["right"] = _ranktree.rbtree_node_t_right_get
    if _newclass:right = _swig_property(_ranktree.rbtree_node_t_right_get, _ranktree.rbtree_node_t_right_set)
    __swig_setmethods__["parent"] = _ranktree.rbtree_node_t_parent_set
    __swig_getmethods__["parent"] = _ranktree.rbtree_node_t_parent_get
    if _newclass:parent = _swig_property(_ranktree.rbtree_node_t_parent_get, _ranktree.rbtree_node_t_parent_set)
    __swig_setmethods__["color"] = _ranktree.rbtree_node_t_color_set
    __swig_getmethods__["color"] = _ranktree.rbtree_node_t_color_get
    if _newclass:color = _swig_property(_ranktree.rbtree_node_t_color_get, _ranktree.rbtree_node_t_color_set)
    def __init__(self): 
        this = _ranktree.new_rbtree_node_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ranktree.delete_rbtree_node_t
    __del__ = lambda self : None;
rbtree_node_t_swigregister = _ranktree.rbtree_node_t_swigregister
rbtree_node_t_swigregister(rbtree_node_t)

class rbtree_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rbtree_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rbtree_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["root"] = _ranktree.rbtree_t_root_set
    __swig_getmethods__["root"] = _ranktree.rbtree_t_root_get
    if _newclass:root = _swig_property(_ranktree.rbtree_t_root_get, _ranktree.rbtree_t_root_set)
    def __init__(self): 
        this = _ranktree.new_rbtree_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ranktree.delete_rbtree_t
    __del__ = lambda self : None;
rbtree_t_swigregister = _ranktree.rbtree_t_swigregister
rbtree_t_swigregister(rbtree_t)


def rank_freq(*args):
  return _ranktree.rank_freq(*args)
rank_freq = _ranktree.rank_freq


